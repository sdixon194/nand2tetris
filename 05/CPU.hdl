// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /**
 * 16-bit multiplexor: 
 * for i = 0..15 out[i] = a[i] if sel == 0 
 *                        b[i] if sel == 1
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Instruction to A Register
	Not(in=instruction[15], out=notC); // Not gate for instruction[15]
	Mux16(a=instruction, b=outALU, sel=instruction[15], out=InstructOut); // Mux16 for Instruction to A reg.

	// If it's a C instruction and the destination is set to 1, we want to write to the A register.
	// If it's not a C instruction, we want to write to the A register.
	Or(a=notC, b=instruction[5], out=loadSel);
	ARegister(in=InstructOut, load=loadSel, out=ARegout, out[0..14]=addressM); // A register

	// Choose if we want A register or M.
	Mux(a=false, b=instruction[12], sel=instruction[15], out=AorMsel);
	Mux16(a=ARegout, b=inM, sel=AorMsel, out=AMOut);
	
	// ALU to D register
	Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD); // Mux for D register
	DRegister(in=outALU, load=loadD, out=DRegout);

	// ALU
	ALU(x=DRegout, y=AMOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=outIsZero, ng=outIsNegative);
	
	// PC
	DMux8Way(in=true, sel=instruction[0..2], a=NoJMP, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
	
	Not(in=outIsZero, out=notZero);
	Not(in=outIsNegative, out=notNegative);
	
	And(a=notNegative, b=notZero, out=PositiveAndNotZero);
	And(a=JGT, b=PositiveAndNotZero, out=JGTandNotNegative);
	
	And(a=JEQ, b=outIsZero, out=JEQandIsZero);
	
	Or(a=notNegative, b=outIsZero, out=ZeroOrGreater);
	And(a=JGE, b=ZeroOrGreater, out=JGEandZeroOrGreater);

	And(a=outIsNegative, b=notZero, out=NegativeOrNotZero);
	And(a=JLT, b=NegativeOrNotZero, out=JLTandNegativeOrZero);


	And(a=JNE, b=notZero, out=JNEandNotZero);

	Or(a=outIsNegative, b=outIsZero, out=NegativeAndZero);
	And(a=JLE, b=NegativeAndZero, out=JLEandNegativeAndZero);

	Or8Way( in[0]=JGTandNotNegative,
			in[1]=JEQandIsZero,
			in[2]=JGEandZeroOrGreater,
			in[3]=JLTandNegativeOrZero,
			in[4]=JNEandNotZero,
			in[5]=JLEandNegativeAndZero,
			in[6]=JMP,
			in[7]=false,
			out=jumpCondition
		);
	And(a=instruction[15], b=jumpCondition, out=comparisonLoad);
	Not(in=comparisonLoad, out=increment);
	PC(in=ARegout, load=comparisonLoad, inc=increment, reset=reset, out[0..14]=pc, out[15]=false);

	// WriteM
	Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
}