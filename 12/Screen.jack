// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
 class Screen {

	static Array twoToThe;
	static boolean black;
    /** Initializes the Screen. */
    function void init() {
		let black = true;
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384; // cannot represent 32768 as a single value, it is too large
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 1632;
		while ( i < 8193 ) {
			do Memory.poke( i, 0000000000000000 );
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let black = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel( int x, int y ) {
		var int ramAddr, bitVal, bitPos, mask;
		// Compute the RAM location of the coorindates
		let ramAddr = ( y * 32 ) +  ( x / 16 ) + 16384;
		let bitVal = Memory.peek( ramAddr );
		let bitPos = Screen.remainder( x, 16);
		let mask = twoToThe[bitPos];
		// Set the bit
		if ( black ) {
			let bitVal = ( bitVal | mask );
		} else {
			let bitVal = ( bitVal & ~mask );
		}
		// Write the bit back to RAM
		do Memory.poke( ramAddr, bitVal );
		return;
    }

	function int remainder(int dividend, int divisor) {
		while (dividend > ( divisor - 1 ) ) {
		  let dividend = dividend - divisor;
		}
		return dividend;
	  }

	function void drawVerticalLine(int x1, int y1, int y2 ) {
		var int temp;
		if ( y1 > y2 ) {
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		let y2 = y2 + 1; // can't do <= in the while loop, so we add 1 to y2
		while ( y1 < y2 ) {
			do Screen.drawPixel(x1, y1);
			let y1 = y1 + 1;
		}
		return;
	}

	function void drawHorizontalLine(int x1, int y1, int x2 ) {
		var int temp;
		if ( x1 > x2 ) {
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
		}
		let x2 = x2 + 1; // can't do <= in the while loop, so we add 1 to x2
		while ( x1 < x2 ) {
			do Screen.drawPixel(x1, y1);
			let x1 = x1 + 1;
		}
		return;
	}
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int x, y, dx, dy, dx2, dy2, ix, iy, i, a, b, diff, temp;
		var String direction;

		// We want to make sure we're drawing from left to right for consistency.
		if ( x1 > x2 ) {
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}

		let dx = x2 - x1;
		let dy = y2 - y1;

		if ( dx = 0 ) {
			do Screen.drawVerticalLine(x1, y1, y2);
			return;
		}

		if ( dy = 0 ) {
			do Screen.drawHorizontalLine(x1, y1, x2 );
			return;
		}


		let diff = 0;
		let a = 0;
		let b = 0;
		if ( y2 > y1 ) {
			while( a < dx & b < dy ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				if ( diff < 0 ) {
					let a = a + 1;
					let diff = diff + dy;
				} else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
		} else {
			while( a < dx & b > dy ) { // -55
				do Screen.drawPixel(x1 + a, y1 + b);
				if ( diff < 0 ) {
					let a = a + 1;
					let diff = diff - dy;
				} else {
					let b = b - 1;
					let diff = diff - dx;
				}
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int temp;
		if ( x1 > x2 ) {
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		if ( y1 > y2 ) {
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		let x2 = x2 + 1;
		while( x1 < x2 ) {
			do Screen.drawVerticalLine(x1, y1, y2);
			let x1 = x1 + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy, rsquared;
		let rsquared = r * r;
		let dy = -r;
		let r = r + 1;
		while ( dy < r ) {
			let dx = Math.sqrt( rsquared - ( dy * dy ) );
			do Screen.drawHorizontalLine( x - dx, y + dy, x + dx );
			let dy = dy + 1;
		}
		return;
    }
}
