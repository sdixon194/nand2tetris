// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array twoToThe;
    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		return;
	}

	/** Return true if the i'th bit of X is set to 1. */
    function boolean bit(int x, int i) {
		return ~((x & twoToThe[i]) = 0);
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
		var int returnValue;
		if ( x < 0 ) {
			let returnValue = -x;
		} else {
			let returnValue = x;
		}
		return returnValue;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, i, shiftedX;
		let sum = 0;
		let i = 0;
		let shiftedX = x;
		while ( i < 16 ) {
			if ( Math.bit(y, i) ) {
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int quotient, result;
		var boolean isNegX, isNegY;
		if ( x < 0 ) {
			let isNegX = true;
		} else {
			let isNegX = false;
		}

		if ( y < 0 ) {
			let isNegY = true;
		} else {
			let isNegY = false;
		}

		let x = Math.abs(x);
		let y = Math.abs(y);

		if ( y > x ) {
			return 0;
		}

		let quotient = Math.divide( x, 2 * y );
		if ( ( x - ( 2 * y * quotient ) ) < y ) {
			let result = 2 * quotient;
		} else {
			let result = 2 * quotient + 1;
		}

		if ( isNegX = isNegY ) {
			let result = result;
		} else {
			let result = -result;
		}
		return result;
    }

	function int sqrtIteration(int input, int i ) {
		var int result;
		let result = ( ( input + ( twoToThe[i] ) ) * ( input + ( twoToThe[i] ) ) );
		return result;
	}
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int i, result;
		let i = 7; // 7 = ( 16 bits/ 2 ) - 1
		let result = 0;
		while ( ~(i < 0 ) ) { 
			if ( ( ( Math.sqrtIteration(result, i ) < x ) | ( Math.sqrtIteration(result, i ) = x ) ) &
				( Math.sqrtIteration(result, i ) > 0 ) ) {
				let result = result + ( twoToThe[i] );
			}
			let i = i - 1;
		}
		return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if ( a > b ) {
			return a;
		} else {
			return b;
		}	
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if ( a < b ) {
			return a;
		} else {
			return b;
		}
    }
}
