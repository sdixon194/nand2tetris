// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {

	field Array chars;
	field int length, maxLen, intStringLength;
	field boolean isNegative;
	/** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if ( maxLength = 0 ) {
			let maxLength = 1;
		}
		let chars = Array.new( maxLength );
		let maxLen = maxLength;
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do chars.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let chars[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if ( length < maxLen ) {
			let chars[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int val, i, d;
		let val = 0;
		let i = 0;

		if ( charAt(0) = 45 ) {
			let isNegative = true;
			let i = 1;
		}
	
		while ( ( i < length ) & ( charAt(i) > 47 ) & ( charAt(i) < 58 ) ) {
			let d = charAt(i) - 48;
			let val = ( val * 10 ) + d;
			let i = i + 1;
		}

		if ( isNegative ) {
			let val = -val;
		}

		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int lastDigit, c;
		// If val is negative, make it positive and append a minus sign.
		if ( val < 0 ) {
			let val = -val;
			let isNegative = true;
		}
		// Extract the rightmost digit by taking the remainder of val / 10.
		let lastDigit = String.remainder( val, 10 );
		let c = lastDigit + 48;
		// If val is not zero, recursively set the remaining digits.
		if ( val < 10 ) {
			let length = 0;
			if ( isNegative ) {
				do appendChar(45);
			}
			do appendChar(c);
		} else {
			do setInt( val / 10 );
			do appendChar(c);
		}
		return;
    }

	function int remainder(int dividend, int divisor) {
		while (dividend > ( divisor - 1 ) ) {
		  let dividend = dividend - divisor;
		}
		return dividend;
	  }
	  
	
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
